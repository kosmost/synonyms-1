{"version":3,"sources":["appconfig.js","graphql/mutations.ts","consts/Const.js","Components/Utilities.js","Components/SynonymsChoises.js","graphql/queries.ts","Components/Home.js","Components/Trends.js","Components/Lessons.js","Components/GoOver.js","Components/Settings.js","App.js","serviceWorker.js","index.js"],"names":["awsconfig","Auth","region","userPoolId","userPoolWebClientId","createPracticeHistory","QUESTION_CONTENTS","QUESTION_TITLES","Loading","className","Spinner","as","animation","size","role","aria-hidden","getFormatedDate","date","dd","String","getDate","padStart","mm","getMonth","getFullYear","getFormatedTime","getHours","getMinutes","getSeconds","randomsort","a","b","Math","random","SynonymsChoises","props","handleOptionChange","changeEvent","setState","selectedOption","target","value","handleRedoSession","state","results","fill","index","items","length","shuffleItemAnswers","currentIndex","firstTime","handleSubmit","currentItem","buttonText","Answer","addHistory","sendHistory","addToSpacedRepetition","addSpacedRepetition","session","part","username","tryNum","this","Date","input","result","answer","itemId","id","sessionId","partId","type","time","genre","console","error","today","tomorrow","log","setDate","contentId","stageIdx","times","choises","A","B","C","D","E","sort","match","params","currentAuthenticatedUser","bypassCache","then","user","Container","Hint","localeCompare","Fade","in","ChoisesDisplay","Form","Group","Row","Col","sm","map","choise","Check","label","name","onChange","checked","key","disabled","ListView","Jumbotron","base","ResultBar","style","display","ButtonGroup","Button","variant","Question","marginLeft","onClick","data","labels","datasets","backgroundColor","hoverBackgroundColor","amountTrue","i","Link","to","query","graphqlOperation","eq","toString","limit","listSynonyms","loading","errors","lenth","itemsLen","mutation","mutations","Component","withRouter","Home","Card","width","Body","borderColor","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","stack","borderWidth","hoverBorderColor","options","responsive","tooltips","mode","elements","line","scales","xAxes","stacked","gridLines","yAxes","position","ticks","min","max","callback","scaleLabel","labelString","plugins","datalabels","context","dataset","borderRadius","color","font","weight","Trends","listItems","TrendChart","sortArray","Array","from","amountMap","Map","accuracyMap","amount","get","accuracy","set","keys","reverse","x","round","values","ceil","floor","ChartDataLabels","listPracticeHistories","Lessons","CardRow","rowId","j","itemIdx","push","Title","Text","CardDeck","rows","GoOver","answered","updateSpacedRepetition","yyyy","hh","mi","ss","now","content","stage","nextRepeatDate","nextRepeatDateStr","err","le","querySynonymsSrsContent","Settings","signOut","Amplify","configure","App","Logger","LOG_LEVEL","basename","process","exact","path","component","withAuthenticator","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad0fc193.chunk.js","sourcesContent":["const awsconfig =  {\n    \"aws_appsync_graphqlEndpoint\": \"https://xl3kan6u75ahtmarnfhdoasyja.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\n    \"aws_appsync_apiKey\": \"da2-tah3xlfmmnddtfybi3ps7l3lqa\",\n    Auth: {\n        region: 'us-east-1',\n        userPoolId: 'us-east-1_B78sn82ah',\n        userPoolWebClientId: '7nca7db89qqeddmt2rh90587c5',\n    }\n};\n\nexport default awsconfig;","// tslint:disable\n// this is an auto generated file. This will be overwritten\n\nexport const createSynonyms = `mutation CreateSynonyms($input: CreateSynonymsInput!) {\n  createSynonyms(input: $input) {\n    id\n    base\n    session\n    type\n    index\n    A\n    B\n    C\n    D\n    E\n    Answer\n    Hint\n  }\n}\n`;\nexport const updateSynonyms = `mutation UpdateSynonyms($input: UpdateSynonymsInput!) {\n  updateSynonyms(input: $input) {\n    id\n    base\n    session\n    type\n    index\n    A\n    B\n    C\n    D\n    E\n    Answer\n    Hint\n  }\n}\n`;\nexport const deleteSynonyms = `mutation DeleteSynonyms($input: DeleteSynonymsInput!) {\n  deleteSynonyms(input: $input) {\n    id\n    base\n    session\n    type\n    index\n    A\n    B\n    C\n    D\n    E\n    Answer\n    Hint\n  }\n}\n`;\nexport const createPracticeHistory = `mutation CreatePracticeHistory($input: CreatePracticeHistoryInput!) {\n  createPracticeHistory(input: $input) {\n    id\n    username\n    result\n    tryNum\n    answer\n    itemId\n    sessionId\n    partId\n    index\n    date\n    time\n    genre\n  }\n}\n`;\nexport const createSynonymsSrs = `mutation CreateSynonymsSrs($input: CreateSynonymsSrsInput!) {\n  createSynonymsSrs(input: $input) {\n    username\n    contentId\n    date\n    stageIdx\n    times\n    others\n  }\n}\n`;\nexport const updateSynonymsSrs = `mutation UpdateSynonymsSrs($input: UpdateSynonymsSrsInput!) {\n  updateSynonymsSrs(input: $input) {\n    username\n    contentId\n    date\n    stageIdx\n    times\n    others\n  }\n}\n`;","export const QUESTION_CONTENTS = [\n    'Identify which word is MOST SIMILAR in meaning to the word listed below.',\n    'Identify which word is MOST OPPOSITE in meaning to the workd listed below.',\n    'Identify which of the 5 options A-E matches LEAST WELL in meaning to the word listed below.',\n    'Each group has four words which can have similar meanings, and one word which is different. Find the odd one out.',\n    'In each of the following pieces of text, one word is missing. Complete it by choosing one from the options listed below.'\n];\n\nexport const QUESTION_TITLES = [\n    'Matching Words',\n    'Opposite Words',\n    'Words That Do Not Match',\n    'Odd One Out',\n    'Find The Missing Word'\n];","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nexport const Loading = () => {\n    return (\n        <div className=\"d-flex justify-content-center align-items-center\">\n        <Spinner\n            as=\"span\"\n            animation=\"grow\"\n            size=\"sm\"\n            role=\"status\"\n            aria-hidden=\"true\"\n          />\n          Loading...\n          </div>\n    );\n}\n\n// Change date object to String YYYY-MM-DD format\nexport const getFormatedDate = (date) => {\n    \n    let dd = String(date.getDate()).padStart(2, '0');\n    let mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0!\n    let yyyy = date.getFullYear();\n    return (yyyy + '-' + mm + '-' + dd);\n\n };\n\n // Change date object to String HH:MM:SSZ format\nexport const getFormatedTime = (date) => {\n    \n    let hh = String(date.getHours()).padStart(2, '0');\n    let mi = String(date.getMinutes()).padStart(2, '0');\n    let ss = String(date.getSeconds()).padStart('2', 0);\n\n    return (hh + ':' + mi + ':' + ss + 'Z');\n\n };\n\n export const randomsort = (a, b) => {\n    return Math.random()>.5 ? -1 : 1;\n}","import React, { Component } from 'react';\nimport { graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport { Auth } from 'aws-amplify';\n\n\nimport * as queries from '../graphql/queries';\nimport * as mutations from '../graphql/mutations'\n// import * as subscriptions from './graphql/subscriptions';\n\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Jumbotron, Form, Col, Row, Container, ButtonGroup, Fade } from 'react-bootstrap';\nimport { withRouter } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { QUESTION_CONTENTS, QUESTION_TITLES } from '../consts/Const';\nimport { Pie } from 'react-chartjs-2';\n\nimport { getFormatedDate, getFormatedTime, randomsort } from './Utilities';\n\nclass SynonymsChoises extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            session: 0,\n            part: 0,\n            items: [],\n            results: [],\n            currentIndex: 0,\n            selectedOption: '',\n            firstTime: true,\n            username: '',\n            sendHistory: null,\n            addSpacedRepetition: null,\n            buttonText: 'Submit'\n        };\n      }\n\n    handleOptionChange = changeEvent => {\n        this.setState({\n            selectedOption: changeEvent.target.value\n        });\n    }\n\n    handleRedoSession = () => {\n        this.state.results.fill('-');\n        for (let index = 0; index < this.state.items.length; index ++) {\n            this.shuffleItemAnswers (index);\n        }\n        this.setState({\n            currentIndex: 0,\n            selectedOption: '',\n            firstTime: false\n        });\n    }\n\n    // async \n    async addHistory (sendHistory, tryNum) {\n        const currentItem = this.state.items[this.state.currentIndex];\n        const date = new Date();\n     \n        const input = {\n         //   id: this.state.username + yyyy + mm + dd + hh + mi + ss + this.state.session + this.state.part + tryNum,\n            username: this.state.username,\n            result: this.state.selectedOption === currentItem.Answer,\n            tryNum: tryNum,\n            answer: this.state.selectedOption,\n            itemId: currentItem.id,\n            sessionId: currentItem.session,\n            partId: currentItem.type,\n            index: currentItem.index,\n            date: getFormatedDate(date),\n            time: getFormatedTime(date),\n            genre: 'lesson'\n        }\n    \n        try {\n            // console.log (input);\n            await sendHistory({input})\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    async addToSpacedRepetition (addSpacedRepetition) {\n        const currentItem = this.state.items[this.state.currentIndex];\n        const today = new Date();\n        let tomorrow = new Date(today);\n        console.log (\"today:\", today);\n        console.log (\"tomorrow:\", tomorrow);\n\n        tomorrow.setDate(tomorrow.getDate() + 1);\n     \n        const input = {\n         //   id: this.state.username + yyyy + mm + dd + hh + mi + ss + this.state.session + this.state.part + tryNum,\n            username: this.state.username,\n            contentId: currentItem.id,\n            date: getFormatedDate(tomorrow),\n            stageIdx: 0, // initial value for SRS item, SRS will update that later\n            times: 0 // initial value for SRS item\n        }\n    \n        try {\n            // console.log (\"add to SRS:\", input);\n            await addSpacedRepetition({input})\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    handleSubmit = () => {\n        let currentItem = this.state.items[this.state.currentIndex];\n\n        if (this.state.buttonText === 'Next') {\n            // clear state\n            this.setState({\n                selectedOption: '',\n                buttonText: 'Submit'\n            });\n            // move to next item\n            this.setState({ currentIndex: this.state.currentIndex + 1 });\n        }\n        // the user made choise / selected one of the radio input\n        else if (this.state.selectedOption.length > 0 ) {\n            this.setState({ buttonText: 'Next' });\n            this.state.results[this.state.currentIndex] =\n                (this.state.selectedOption === currentItem.Answer);\n            if (this.state.firstTime === true) {\n                this.addHistory (this.state.sendHistory, 1);\n                if (this.state.selectedOption !== currentItem.Answer) \n                    this.addToSpacedRepetition (this.state.addSpacedRepetition);\n            }\n            else \n                this.addHistory (this.state.sendHistory, 2)\n        }\n        //console.log(\"You have submitted:\", this.state.selectedOption);\n    }\n\n    shuffleItemAnswers(index) {\n        let currentItem = this.state.items[index];\n        let choises = [currentItem.A, currentItem.B, currentItem.C, currentItem.D, currentItem.E];\n        // random the choises list sequence\n        choises.sort(randomsort);    \n        this.state.items[index].A = choises[0];\n        this.state.items[index].B = choises[1];\n        this.state.items[index].C = choises[2];\n        this.state.items[index].D = choises[3];\n        this.state.items[index].E = choises[4];\n    }\n    \n    componentDidMount() {\n            const {session, part} = this.props.match.params;\n            this.setState({session: session, part: part});\n\n            Auth.currentAuthenticatedUser({\n                bypassCache: false  \n            }).then(user => {\n                this.setState({username: user.username});\n            });\n\n            //todo: search backend whether is first time testing today\n    }\n\n    render() {\n        //console.log ('session:', this.state.session, ' part:', this.state.part);\n\n        if (this.state.session === 0)\n            return(<Container> Loading </Container>);\n\n        const Hint = () => {\n\n            if (this.state.items.length > 0) {\n                let currentItem = this.state.items[this.state.currentIndex];\n\n                if (this.state.buttonText.localeCompare ('Next') === 0) {\n                    let open = true;\n                    if (this.state.selectedOption !== currentItem.Answer) \n                        return (<Fade in={open}>\n                            <div id='hint'> <p className=\"text-danger\">Not correct! </p> {currentItem.Hint} <br /></div>\n                        </Fade>);\n                    else\n                        return (<Fade in={open}>\n                            <div id='hint'> Correct! <br /></div>\n                        </Fade>);\n                }\n            }\n            return (<Fade in={false}><div id='hint'></div></Fade>)\n        } \n\n        const ChoisesDisplay = () => {\n            let currentItem = this.state.items[this.state.currentIndex];\n            let choises = [currentItem.A, currentItem.B, currentItem.C, currentItem.D, currentItem.E];\n\n            return (\n                <fieldset>\n                    <Form.Group as={Row}>\n                    <Col sm={10}>\n                    { choises.map (choise => <Form.Check \n                                            type=\"radio\"\n                                            label={choise}\n                                            name=\"answer\"\n                                            id={choise} \n                                            value={choise}\n                                            onChange={this.handleOptionChange}\n                                            checked={this.state.selectedOption === choise}\n                                            key={choise}\n                                            disabled={this.state.buttonText.localeCompare('Next') === 0} />)}\n                    </Col>\n                    </Form.Group>\n                </fieldset>\n            );\n        }\n\n        const ListView = () => {\n            let currentItem = this.state.items[this.state.currentIndex];\n            if (this.state.items.length > 0) {\n                return (\n                    <Jumbotron>\n                        <h5> {QUESTION_CONTENTS[this.state.part-1]} </h5>\n                        <br />\n                        <h3> {currentItem.base} </h3>\n                        <br />\n                        <ChoisesDisplay />\n                    </Jumbotron>\n                );\n            }\n            return (<div></div>);\n        }\n\n        const ResultBar = () => {\n            return (\n                <div className=\"bg-light\" style={{display: \"block\"}}>\n                <ButtonGroup>\n                    { this.state.results.map ((result, index) => <Button\n                                                                  variant={result === '-' ?\n                                                                           'secondary' :\n                                                                           result === true ?\n                                                                           'success' : 'danger'}\n                                                                  size=\"sm\"\n                                                                  key={index}\n                                                                  className=\"mr-1\"\n                                                                  >\n                                                                    {index+1}\n                                                                  </Button>) }\n                </ButtonGroup>\n                </div>\n            )\n        }\n\n        const ResultPie = () => {\n\n            let data = {\n                labels: [\n                    'Correct',\n                    'Wrong'\n                ],\n                datasets: [{\n                    data: [0,0],\n                    backgroundColor: [\n                    '#36A2EB',\n                    '#FF6384'\n                    ],\n                    hoverBackgroundColor: [\n                    '#36A2EB',\n                    '#FF6384'\n                    ]\n                }]\n            };\n\n            let amountTrue = 0;\n            for (let i = 0; i < this.state.results.length; i++) {\n              if (this.state.results[i] === true) \n                amountTrue ++;\n            }\n\n            data.datasets[0].data[0] = amountTrue;\n            data.datasets[0].data[1] = this.state.results.length - amountTrue;\n\n            return (\n                <Container>\n                    <h4 className=\"text-center\">You've finished Session {this.state.session} Part {this.state.part}</h4>\n                    <Pie data={data} />\n                    <Row>\n                        <Col></Col>\n                        <Col>\n                        <ul>\n                        <li>Correct: {amountTrue}</li>\n                        <li>Wrong: {this.state.results.length - amountTrue}</li>\n                        </ul>\n                        </Col>\n                        <Col></Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"col\"></Col>\n                        <Col className=\"col\">\n                        <Button onClick={this.handleRedoSession}>\n                            Retry\n                        </Button>\n                        </Col>\n                        <Col className=\"col\"></Col>\n                        <Col className=\"col\">\n                        <Button as={Link} to=\"/\">\n                            Back\n                        </Button>\n                        </Col>\n                    </Row>\n                </Container>\n            );\n        }\n\n        const Question = () => {\n            return (\n                <Container>\n                    <ResultBar />\n                    {/* Brand Title */}\n                    <div className=\"text-white bg-dark px-2\">\n                        Lesson {this.state.session} - {QUESTION_TITLES[this.state.part-1]}\n                    </div>\n\n                    <ListView />\n                    {/* float button to right */}\n                            <Row>\n                             <Col>\n                             <Hint />\n                             </Col>\n                             <Col>\n                                <div style={{display: \"flex\"}}>\n                                <Button \n                                    style={{ marginLeft: \"auto\" }} \n                                    id=\"submit\" \n                                    onClick={() => this.handleSubmit()}> \n                                    { this.state.buttonText } \n                                </Button>\n                                </div>\n                            </Col>\n                            </Row>\n                </Container>\n            );\n        }\n\n        // Data already retrieved, show questions or result summary\n        if (this.state.items.length > 0) {\n            if (this.state.currentIndex >= this.state.items.length) {\n                return (<ResultPie />);\n            }\n            return (<Question />);\n        }\n\n        // No data, retrieve it first. \n        return (\n            <div>\n                <Connect query={graphqlOperation(queries.listSynonyms, \n                                    {\"filter\": { session: { eq: this.state.session},\n                                                type: { eq: this.state.part.toString()}},\n                                                limit: 5000})}>\n                    {({ data: { listSynonyms }, loading, errors }) => {\n                    if (loading || !listSynonyms) return (<h3>Loading...</h3>);\n                        if (errors.lenth > 0 ) return (<h3>Error</h3>);\n\n                        this.state.items = listSynonyms.items;\n                        const itemsLen = listSynonyms.items.length;\n                        // initiate result.\n\n                        for (let index = 0; index < itemsLen; index ++) {\n                            this.state.results[index] = '-';\n                            this.shuffleItemAnswers (index);\n                        }\n                        console.log ('result array: ', this.state.results);                   \n        \n                        return (<Question />);\n                    }}\n                </Connect>\n\n                <Connect mutation={graphqlOperation(mutations.createPracticeHistory)}>\n                  {({mutation}) => {\n                      this.state.sendHistory = mutation;\n                      return (<div></div>);\n                  }}\n                </Connect>\n\n                <Connect mutation={graphqlOperation(mutations.createSynonymsSrs)}>\n                  {({mutation}) => {\n                      this.state.addSpacedRepetition = mutation;\n                      return (<div></div>);\n                  }}\n                </Connect>\n\n            </div>\n        );\n    }\n}\n\nexport default withRouter(SynonymsChoises);","// tslint:disable\n// this is an auto generated file. This will be overwritten\n\nexport const getSynonyms = `query GetSynonyms($id: ID!, $session: Int!) {\n  getSynonyms(id: $id, session: $session) {\n    id\n    base\n    session\n    type\n    index\n    A\n    B\n    C\n    D\n    E\n    Answer\n    Hint\n  }\n}\n`;\nexport const listSynonyms = `query ListSynonyms(\n  $filter: TableSynonymsFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listSynonyms(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      base\n      session\n      type\n      index\n      A\n      B\n      C\n      D\n      E\n      Answer\n      Hint\n    }\n    nextToken\n  }\n}\n`;\nexport const querySynonymsBySessionBaseType = `query QuerySynonymsBySessionBaseType(\n  $session: Int!\n  $first: Int\n  $after: String\n) {\n  querySynonymsBySessionBaseType(\n    session: $session\n    first: $first\n    after: $after\n  ) {\n    items {\n      id\n      base\n      session\n      type\n      index\n      A\n      B\n      C\n      D\n      E\n      Answer\n      Hint\n    }\n    nextToken\n  }\n}\n`;\nexport const querySynonymsBySessionBaseIndex = `query QuerySynonymsBySessionBaseIndex(\n  $session: Int!\n  $first: Int\n  $after: String\n) {\n  querySynonymsBySessionBaseIndex(\n    session: $session\n    first: $first\n    after: $after\n  ) {\n    items {\n      id\n      base\n      session\n      type\n      index\n      A\n      B\n      C\n      D\n      E\n      Answer\n      Hint\n    }\n    nextToken\n  }\n}\n`;\nexport const queryPracticeHistories = `\nquery ListPracticeHistories(\n  $filter: TablePracticeHistoryFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listPracticeHistories(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      username\n      result\n      tryNum\n      answer\n      itemId\n      sessionId\n      partId\n      index\n      date\n      time\n    }\n    nextToken\n  }\n}\n`;\nexport const queryPracticeHistoriesByUsernameDate = `\nquery QueryPracticeHistoriesByUsernameDate(\n  $username: String!\n  $first: Int\n  $after: String\n) {\n  queryPracticeHistoriesByUsernameDate(\n    username: $username\n    first: $first\n    after: $after\n  ) {\n    items {\n      id\n      username\n      result\n      tryNum\n      answer\n      itemId\n      sessionId\n      partId\n      index\n      date\n      time\n    }\n    nextToken\n  }\n}\n`;\nexport const listSynonymsSrs = `\nquery ListSynonymsSrs(\n  $filter: TableSynonymsSrsFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listSynonymsSrs(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      username\n      contentId\n      date\n      stageIdx\n      times\n      others\n    }\n    nextToken\n  }\n}\n`;\nexport const querySynonymsSrsContent = `query QuerySynonymsSrsContent(\n  $filter: TableSynonymsSrsFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  querySynonymsSrsContent(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    items {\n      username\n      contentId\n      date\n      stageIdx\n      times\n      others\n      content {\n        id\n        base\n        session\n        type\n        index\n        A\n        B\n        C\n        D\n        E\n        Answer\n        Hint\n      }\n    }\n    nextToken\n  }\n}\n`;\n","\nimport React, { Component } from '../../node_modules/react';\nimport { Container, Row, Col, Card } from '../../node_modules/react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nclass Home extends Component {\n\n    render () {\n        \n        return (\n          <Container>\n              <Row>\n                <Col>\n                    <Card className=\"mt-1\" style={{ width: '18rem' }} key='goover'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={`/goover`}>Go Over</Card.Link>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col>\n                    <Card className=\"mt-1\" style={{ width: '18rem' }} key='lessons'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={`/lessons`}>Lessons</Card.Link>\n                        </Card.Body>\n                    </Card>\n                </Col>\n              </Row>\n              <Row>\n                  <Col>\n                  <Card className=\"mt-1\" style={{ width: '18rem' }} key='trends'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={`/trends`}>History</Card.Link>\n                        </Card.Body>\n                    </Card>\n                  </Col>\n                  <Col>\n                  <Card className=\"mt-1\" style={{ width: '18rem' }} key='setting'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={`/settings`}>Settings</Card.Link>\n                        </Card.Body>\n                    </Card>\n                 </Col>\n              </Row>\n          </Container>\n        );\n    }\n}\n\nexport default Home","import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { Auth, graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport { Bar } from 'react-chartjs-2';\nimport { ChartDataLabels } from 'chartjs-plugin-datalabels';\n\n\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Spinner } from 'react-bootstrap'\n\nimport * as queries from '../graphql/queries';\n\n\nlet data = {\n    labels: [],\n    datasets: [{\n        label: 'Accuracy',\n        type:'line',\n        data: [],\n        fill: false,\n        borderColor: '#EC932F',\n        backgroundColor: '#EC932F',\n        pointBorderColor: '#EC932F',\n        pointBackgroundColor: '#EC932F',\n        pointHoverBackgroundColor: '#EC932F',\n        pointHoverBorderColor: '#EC932F',\n        yAxisID: 'y-axis-2'\n      },{\n        stack: '0',\n        type: 'bar',\n        label: 'Correct',\n        data: [],\n        fill: false,\n        backgroundColor: 'rgba(102,187,106,0.6)',\n        borderColor: 'rgba(102,187,106,1)',\n        borderWidth: 1,\n        hoverBackgroundColor: 'rgba(0,230,118,0.6)',\n        hoverBorderColor: 'rgba(0,230,118,1)',\n        yAxisID: 'y-axis-1'\n      },{\n        stack: '0',\n        type: 'bar',\n        label: 'Wrong',\n        data: [],\n        fill: false,\n        backgroundColor: 'rgba(255,23,68,0.6)',\n        borderColor: 'rgba(255,23,68,1)',\n        borderWidth: 1,\n        hoverBackgroundColor: 'rgba(255,99,132,0.6)',\n        hoverBorderColor: 'rgba(255,99,132,1)',\n        yAxisID: 'y-axis-1' \n      }\n    ]\n  };\n  \n  let options = {\n    responsive: true,\n    tooltips: {\n      mode: 'label'\n    },\n    elements: {\n      line: {\n        fill: false\n      }\n    },\n    scales: {\n      xAxes: [\n        {\n          display: true,\n          stacked: true,\n          gridLines: {\n            display: false\n          }\n        }\n      ],\n      yAxes: [\n        {\n          type: 'linear',\n          display: true,\n          position: 'left',\n          id: 'y-axis-1',\n          gridLines: {\n            display: false\n          },\n          stacked: true,\n          ticks: {\n            min:0\n          }\n        },\n        {\n          type: 'linear',\n          display: true,\n          position: 'right',\n          id: 'y-axis-2',\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            min: 0,\n            max: 100,\n            callback: function(value) {\n                return value + \"%\"\n            }\n          },\n          scaleLabel: {\n            display: true,\n            labelString: \"Percentage\"\n          }\n        }\n      ]\n    },\n    plugins: {\n        datalabels: {\n            backgroundColor: function(context) {\n                return context.dataset.backgroundColor;\n            },\n            borderRadius: 2,\n            color: 'white',\n            font: {\n                weight: 'bold'\n            },\n            // formatter: Math.round\n        }\n    },\n  };\n\nclass Trends extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            session: 0,\n            part: 0,\n            listItems: [],\n            results: [],\n            username: '',\n            loading: true\n        };\n    }\n\n    componentDidMount() {\n        // const {session, part} = this.props.match.params;\n        // this.setState({session: session, part: part});\n\n        Auth.currentAuthenticatedUser({\n            bypassCache: false  \n        }).then(user => {\n            this.setState({username: user.username});\n        });\n    }\n\n    render () {\n\n        const Loading = () => {\n            return (\n                <div className=\"d-flex justify-content-center align-items-center\">\n                <Spinner\n                    as=\"span\"\n                    animation=\"grow\"\n                    size=\"sm\"\n                    role=\"status\"\n                    aria-hidden=\"true\"\n                  />\n                  Loading...\n                  </div>\n            );\n        }\n\n        const TrendChart = () => {\n            const itemsLen = this.state.listItems.length;\n            let sortArray = Array.from(this.state.listItems);\n            let amountMap = new Map();\n            let accuracyMap = new Map();\n\n            sortArray.sort(function(a,b) { \n              // console.log ('a.date - b.date', a.date-b.data);\n              if (a.date > b.date) {\n                return 1;\n              }\n              if (a.date < b.date) {\n                return -1;\n              }\n              return 0;\n            });\n\n            for (let index = itemsLen; index > 0; index --) {\n                let date = sortArray[index-1].date;\n\n                let amount = amountMap.get(date);\n                let accuracy = accuracyMap.get(date);\n\n                amount = typeof amount === 'undefined'? 1:amount+1;\n                accuracy = typeof accuracy === 'undefined'? 0:accuracy;\n                \n                accuracy = sortArray[index-1].result === true? accuracy+1:accuracy;\n                \n                amountMap.set(date, amount);\n                accuracyMap.set(date, accuracy);\n\n                // show recent 20 days at max\n                if ( amountMap.length > 20 )\n                    break;\n            }\n\n            data.labels = Array.from(amountMap.keys()).reverse();\n            data.datasets[0].data = Array.from(accuracyMap.keys(), \n                    x => Math.round(accuracyMap.get(x)*100/amountMap.get(x))).reverse();\n            data.datasets[1].data = Array.from(accuracyMap.values()).reverse();\n            data.datasets[2].data = Array.from(amountMap.keys(), x => amountMap.get(x) - accuracyMap.get(x)).reverse();\n\n            options.scales.yAxes[1].ticks.max = Math.ceil(Math.max (...data.datasets[0].data) * 1.3/10)*10;\n            options.scales.yAxes[0].ticks.max = Math.floor(Math.max (...Array.from(amountMap.values())) * 1.3);\n\n            console.log ('amount:', amountMap);\n            console.log ('accuracy:', accuracyMap);\n\n            console.log ('data', data);\n\n            return (\n                <Container>\n                    <h2>Trends Report</h2>\n                    <Bar\n                    data={data}\n                    options={options}\n                    plugins={ChartDataLabels}\n                    />\n                </Container>\n            );\n        }\n\n        if ( this.state.listItems.length === 0 ) {\n\n            if (this.state.username === '') {\n                return (\n                <Container>\n                <Loading />\n                </Container>);\n            }\n\n            return (\n                    <Connect query={graphqlOperation(queries.queryPracticeHistories, \n                                        { \"filter\": { username: {eq: this.state.username}, \n                                                      tryNum: {eq: 1 }},\n                                          limit: 20000\n                                        })}>\n                        {({ data: { listPracticeHistories }, loading, errors }) => {\n                            console.log(\"loading: \", loading);\n                            console.log(\"data:\", listPracticeHistories);\n                        if (loading || !listPracticeHistories) \n                            return (<Loading />);\n\n                            if (errors.lenth > 0 ) return (<Container><h3>Error</h3></Container>);\n\n                            this.state.listItems = listPracticeHistories.items;\n                            console.log ('result array: ', this.state.listItems);                   \n            \n                            return (<TrendChart />);\n                        }}\n                    </Connect>\n            );\n        }\n\n        return (<TrendChart />);\n    }\n}\n\nexport default withRouter(Trends);","\nimport React, { Component } from '../../node_modules/react';\nimport { Card, CardDeck} from '../../node_modules/react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nclass Lessons extends Component {\n\n    render () {\n        const CardWall = (rows) => {\n            let items = [];\n            for (let i = 0; i< rows.rows; i++) {\n                items.push (<CardRow rowId={i} key={i}/>);\n            }\n            return (<div>{items}</div>);\n        }\n        const CardRow = (rowId) => {\n            let items = [];\n            for (let j = 1; j < 5; j++) {\n                let itemIdx = rowId.rowId * 4 + j;\n                items.push(<Card className=\"mt-1\" style={{ width: '18rem' }} key={itemIdx}>\n                            <Card.Body>\n                                <Card.Title>Lesson {itemIdx}</Card.Title>\n                                <Card.Text>\n                                    Select one of the following session to start\n                                </Card.Text>\n                                <Card.Link as={Link} to={`/synonymschoises/${itemIdx}/1`}>Part 1</Card.Link>\n                                <Card.Link as={Link} to={`/synonymschoises/${itemIdx}/2`}>Part 2</Card.Link>\n                                <Card.Link as={Link} to={`/synonymschoises/${itemIdx}/3`}>Part 3</Card.Link>\n                                <br />\n                                <Card.Link as={Link} to={`/synonymschoises/${itemIdx}/4`}>Part 4</Card.Link>\n                                <Card.Link as={Link} to={`/synonymschoises/${itemIdx}/5`}>Part 5</Card.Link>\n                            </Card.Body>\n                        </Card>);\n            }\n            return (<CardDeck >{items}</CardDeck>);\n        }\n        return (\n            <CardWall rows={7} />\n        );\n    }\n}\n\nexport default Lessons","import React, { Component } from 'react';\nimport { graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport { Auth } from 'aws-amplify';\n\n\nimport * as queries from '../graphql/queries';\nimport * as mutations from '../graphql/mutations'\n// import * as subscriptions from './graphql/subscriptions';\n\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Jumbotron, Form, Col, Row, Container, ButtonGroup, Fade } from 'react-bootstrap';\nimport { withRouter } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { QUESTION_CONTENTS, QUESTION_TITLES } from '../consts/Const';\nimport { Pie } from 'react-chartjs-2';\n\nimport { Loading } from './Utilities';\n\n\nfunction randomsort(a, b) {\n    return Math.random()>.5 ? -1 : 1;\n}\n\nclass GoOver extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            results: [],\n            currentIndex: 0,\n            selectedOption: '',\n            answered: '',\n            buttonText: 'Submit',\n            username: '',\n            sendHistory: null,\n            updateSpacedRepetition: null\n        };\n      }\n\n    handleOptionChange = changeEvent => {\n        this.setState({\n            selectedOption: changeEvent.target.value\n        });\n    }\n\n    handleRedoSession = () => {\n        this.state.results.fill('-');\n        for (let index = 0; index < this.state.items.length; index ++) {\n            this.shuffleItemAnswers (index);\n        }\n        this.setState({\n            currentIndex: 0,\n            selectedOption: '',\n            answered: '',\n            buttonText: 'Submit'\n        });\n    }\n\n    // async \n    async addHistory (sendHistory, tryNum) {\n        let currentItem = this.state.items[this.state.currentIndex];\n        let today = new Date();\n        let dd = String(today.getDate()).padStart(2, '0');\n        let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        let yyyy = today.getFullYear();\n        let hh = String(today.getHours()).padStart(2, '0');\n        let mi = String(today.getMinutes()).padStart(2, '0');\n        let ss = String(today.getSeconds()).padStart(2, '0');\n\n        today = yyyy + '-' + mm + '-' + dd;\n        let now = hh + ':' + mi + ':' + ss + 'Z';\n\n     \n        const input = {\n         //   id: this.state.username + yyyy + mm + dd + hh + mi + ss + this.state.session + this.state.part + tryNum,\n            username: this.state.username,\n            result: this.state.selectedOption === currentItem.content.Answer,\n            tryNum: tryNum,\n            answer: this.state.selectedOption,\n            itemId: currentItem.content.id,\n            sessionId: currentItem.content.session,\n            partId: currentItem.content.type,\n            index: currentItem.content.index,\n            date: today,\n            time: now,\n            genre: 'goover'\n        }\n    \n        try {\n            // console.log (input);\n            await sendHistory({input})\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    async updateSpacedRepetition (updateSpacedRepetition) {\n        const stage = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 1087];\n        const currentItem = this.state.items[this.state.currentIndex];\n        const today = new Date();\n        let nextRepeatDate = new Date(today);\n        nextRepeatDate.setDate(nextRepeatDate.getDate() + stage[currentItem.stageIdx+1]);\n\n        let dd = String(nextRepeatDate.getDate()).padStart(2, '0');\n        let mm = String(nextRepeatDate.getMonth() + 1).padStart(2, '0'); //January is 0!\n        let yyyy = nextRepeatDate.getFullYear();\n\n        const nextRepeatDateStr = yyyy + '-' + mm + '-' + dd;\n     \n        const input = {\n            username: this.state.username,\n            contentId: currentItem.id,\n            date: nextRepeatDateStr,\n            stageIdx: currentItem.stageIdx+1,\n            times: currentItem.times + 1 \n        }\n    \n        try {\n            console.log (\"SRS:\", input);\n            // await updateSpacedRepetition({input})\n        } catch (err) {\n            console.error(err);\n        }\n    } \n\n    handleSubmit = () => {\n        let currentItem = this.state.items[this.state.currentIndex];\n\n        if (this.state.buttonText === 'Next') {\n            // clear state\n            this.setState({\n                answered: '',\n                selectedOption: '',\n                buttonText: 'Submit'\n            });\n            // move to next item\n            this.setState({ currentIndex: this.state.currentIndex + 1 });\n        }\n        // the user made choise / selected one of the radio input\n        else if (this.state.selectedOption.length > 0 ) {\n            this.setState({ buttonText: 'Next' });\n            this.state.results[this.state.currentIndex] =\n                (this.state.selectedOption === currentItem.Answer);\n            this.addHistory (this.state.sendHistory, 3);\n            this.updateSpacedRepetition (this.state.updateSpacedRepetition);\n        }\n        //console.log(\"You have submitted:\", this.state.selectedOption);\n    }\n\n    shuffleItemAnswers(index) {\n        let currentItem = this.state.items[index].content;\n        let choises = [currentItem.A, currentItem.B, currentItem.C, currentItem.D, currentItem.E];\n        // random the choises list sequence\n        choises.sort(randomsort);    \n        this.state.items[index].content.A = choises[0];\n        this.state.items[index].content.B = choises[1];\n        this.state.items[index].content.C = choises[2];\n        this.state.items[index].content.D = choises[3];\n        this.state.items[index].content.E = choises[4];\n    }\n    \n    componentDidMount() {\n            // const {session, part} = this.props.match.params;\n            // this.setState({session: session, part: part});\n\n            Auth.currentAuthenticatedUser({\n                bypassCache: false  \n            }).then(user => {\n                this.setState({username: user.username});\n            });\n    }\n\n    render() {\n        //console.log ('session:', this.state.session, ' part:', this.state.part);\n\n        // if (this.state.session === 0)\n        //     return(<Container> Loading </Container>);\n\n        const Hint = () => {\n\n            if (this.state.items.length > 0) {\n                let currentItem = this.state.items[this.state.currentIndex].content;\n\n                if (this.state.buttonText.localeCompare ('Next') === 0) {\n                    let open = true;\n                    if (this.state.selectedOption !== currentItem.Answer) \n                        return (<Fade in={open}>\n                            <div id='hint'> Not correct! <br/> {currentItem.Hint} <br /></div>\n                        </Fade>);\n                    else\n                        return (<Fade in={open}>\n                            <div id='hint'> Correct! <br /></div>\n                        </Fade>);\n                }\n            }\n            return (<Fade in={false}><div id='hint'></div></Fade>)\n        } \n\n        const ChoisesDisplay = () => {\n            let currentItem = this.state.items[this.state.currentIndex].content;\n            let choises = [currentItem.A, currentItem.B, currentItem.C, currentItem.D, currentItem.E];\n            // random the choises list sequence\n            // choises.sort(randomsort);\n\n            return (\n                <fieldset>\n                    <Form.Group as={Row}>\n                    <Col sm={10}>\n                    { choises.map (choise => <Form.Check \n                                            type=\"radio\"\n                                            label={choise}\n                                            name=\"answer\"\n                                            id={choise} \n                                            value={choise}\n                                            onChange={this.handleOptionChange}\n                                            checked={this.state.selectedOption === choise}\n                                            key={choise}\n                                            disabled={this.state.buttonText.localeCompare('Next') === 0} />)}\n                    </Col>\n                    </Form.Group>\n                </fieldset>\n            );\n        }\n\n        const ListView = () => {\n            let currentItem = this.state.items[this.state.currentIndex].content;\n            if (this.state.items.length > 0) {\n                return (\n                    <Jumbotron>\n                        <h5> {QUESTION_CONTENTS[currentItem.part-1]} </h5>\n                        <br />\n                        <h3> {currentItem.base} </h3>\n                        <br />\n                        <ChoisesDisplay />\n                    </Jumbotron>\n                );\n            }\n            return (<div></div>);\n        }\n\n        const ResultBar = () => {\n            return (\n                <div className=\"bg-light\" style={{display: \"block\"}}>\n                <ButtonGroup>\n                    { this.state.results.map ((result, index) => <Button\n                                                                  variant={result === '-' ?\n                                                                           'secondary' :\n                                                                           result === true ?\n                                                                           'success' : 'danger'}\n                                                                  size=\"sm\"\n                                                                  key={index}\n                                                                  className=\"mr-1\"\n                                                                  >\n                                                                    {index+1}\n                                                                  </Button>) }\n                </ButtonGroup>\n                </div>\n            )\n        }\n\n        const ResultPie = () => {\n\n            let data = {\n                labels: [\n                    'Correct',\n                    'Wrong'\n                ],\n                datasets: [{\n                    data: [0,0],\n                    backgroundColor: [\n                    '#36A2EB',\n                    '#FF6384'\n                    ],\n                    hoverBackgroundColor: [\n                    '#36A2EB',\n                    '#FF6384'\n                    ]\n                }]\n            };\n\n            let amountTrue = 0;\n            for (let i = 0; i < this.state.results.length; i++) {\n                if (this.state.results[i] === true) \n                    amountTrue ++;\n            }\n\n            data.datasets[0].data[0] = amountTrue;\n            data.datasets[0].data[1] = this.state.results.length - amountTrue;\n\n            return (\n                <Container>\n                    <h4 className=\"text-center\">You've finished today's Review</h4>\n                    <Pie data={data} />\n                    <Row>\n                        <Col></Col>\n                        <Col>\n                        <ul>\n                        <li>Correct: {amountTrue}</li>\n                        <li>Wrong: {this.state.results.length - amountTrue}</li>\n                        </ul>\n                        </Col>\n                        <Col></Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"col\">\n                        <Button className=\"mx-auto\" as={Link} to=\"/\">\n                            Home\n                        </Button>\n                        </Col>\n                    </Row>\n                </Container>\n            );\n        }\n\n        const Question = () => {\n            return (\n                <Container>\n                    <ResultBar />\n                    {/* Brand Title */}\n                    <div className=\"text-white bg-dark px-2\">\n                        Go Over \n                        {/* Lesson {this.currentItem.content.session} - {QUESTION_TITLES[this.currentItem.content.part-1]} */}\n                    </div>\n\n                    <ListView />\n                    {/* float button to right */}\n                            <Row>\n                             <Col>\n                             <Hint />\n                             </Col>\n                             <Col>\n                                <div style={{display: \"flex\"}}>\n                                <Button \n                                    style={{ marginLeft: \"auto\" }} \n                                    id=\"submit\" \n                                    onClick={() => this.handleSubmit()}> \n                                    { this.state.buttonText } \n                                </Button>\n                                </div>\n                            </Col>\n                            </Row>\n                </Container>\n            );\n        }\n\n        // Data already retrieved, show questions or result summary\n        if (this.state.items.length > 0) {\n            if (this.state.currentIndex >= this.state.items.length) {\n                return (<ResultPie />);\n            }\n            return (<Question />);\n        }\n\n        let today = new Date();\n        let dd = String(today.getDate()).padStart(2, '0');\n        let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        let yyyy = today.getFullYear();\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        if (this.state.username === \"\") {\n            return (<Loading />);\n        }\n\n        // No data, retrieve it first. \n        return (\n            <div>\n                <Connect query={\n                    graphqlOperation(queries.querySynonymsSrsContent, {\n                                        \"filter\": { \n                                            username: { eq: this.state.username},\n                                            date: { le: today}},\n                                        limit: 15000})}>\n                    {({ data: { querySynonymsSrsContent }, loading, errors }) => {\n                    if (loading || !querySynonymsSrsContent) return (<h3>Loading...</h3>);\n                        if (errors.lenth > 0 ) return (<h3>Error</h3>);\n\n                        this.state.items = querySynonymsSrsContent.items;\n\n                        const itemsLen = querySynonymsSrsContent.items.length;\n                        for (let index = 0; index < itemsLen; index ++) {\n                            // initiate result.\n                            this.state.results[index] = '-';\n                            this.shuffleItemAnswers (index);\n                        }\n                        \n                        console.log ('result array: ', this.state.results);                   \n        \n                        return (<Question />);\n                    }}\n                </Connect>\n\n                <Connect mutation={graphqlOperation(mutations.createPracticeHistory)}>\n                  {({mutation}) => {\n                      this.state.sendHistory = mutation;\n                      return (<div></div>);\n                  }}\n                </Connect>\n\n                <Connect mutation={graphqlOperation(mutations.updateSynonymsSrs)}>\n                  {({mutation}) => {\n                      this.state.updateSpacedRepetition = mutation;\n                      return (<div></div>);\n                      \n                  }}\n                </Connect>\n\n            </div>\n        );\n    }\n}\n\nexport default withRouter(GoOver);","import React, { Component } from \"react\";\nimport { Auth } from 'aws-amplify';\n\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport { Loading } from './Utilities';\n\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            loading: true\n        };\n    }\n\n    componentDidMount() {\n        // const {session, part} = this.props.match.params;\n        // this.setState({session: session, part: part});\n\n        Auth.currentAuthenticatedUser({\n            bypassCache: false  \n        }).then(user => {\n            this.setState({username: user.username});\n        });\n    }\n    render () {\n\n        if (this.state.username === '') {\n            return (\n            <Container>\n            <Loading />\n            </Container>);\n        }\n\n        return (\n            <Container>\n                <Row>\n                  <Col>\n                  <Card className=\"mt-1\" style={{ width: '18rem' }} key='trends'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={`/`}>Home</Card.Link>\n                        </Card.Body>\n                    </Card>\n                  </Col>\n                  <Col>\n                  <Card className=\"mt-1\" style={{ width: '18rem' }} key='setting'>\n                        <Card.Body>\n                            <Card.Link as={Link} to={`#`} onClick={() => Auth.signOut()}>Sign Out {this.username}</Card.Link>\n                        </Card.Body>\n                    </Card>\n                 </Col>\n              </Row>\n            </Container>\n        )\n\n    }\n}\n\nexport default Settings","import React, { Component } from \"react\";\nimport Amplify from \"aws-amplify\";\nimport awsconfig from './appconfig';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport SynonymsChoises from \"./Components/SynonymsChoises\";\nimport Home from \"./Components/Home\";\nimport Trends from \"./Components/Trends\";\nimport Lessons from \"./Components/Lessons\";\nimport GoOver from \"./Components/GoOver\";\nimport Settings from \"./Components/Settings\";\n\nimport { withAuthenticator } from \"aws-amplify-react\";\n\nAmplify.configure(awsconfig);\n\nclass App extends Component {\n    render () {\n        Amplify.Logger.LOG_LEVEL = 'VERBOSE';\n\n        // console.log(\"Your process.env.PUBLIC_URL\", process.env.PUBLIC_URL);\n\n        return (\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route exact path=\"/synonymschoises/:session/:part\" component={SynonymsChoises} />\n                    <Route path=\"/Lessons\" component={Lessons} />\n                    <Route path=\"/trends\" component={Trends} />\n                    <Route path=\"/goover\" component={GoOver} />\n                    <Route path=\"/settings\" component={Settings} />\n                    <Route path=\"/\" component={Home} />\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default withAuthenticator(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}